{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Port \u00b6 Port is a message-based library management database. It allows users to quickly redevelop and reconfigure applications by calling pre-written libraries. This feature simplifies the application development process, enabling users to create applications more easily and efficiently. Please see the documentation lincense The Requirements \u00b6 os : windows 7+ / windows server 2003+ memory : minimum 32GB frameworks : .Net 8.0+ Download URL \u00b6 VERSION OS STABLE URL v1.0.16 Windows x64 No v1.0.16-win-installer Repository \u00b6 Creates a repository \u00b6 port new [repository-name] Tip The repository name cannot contain special characters. It follows the directory naming rules provided by the operating system. Creates a group \u00b6 port add [group-name] Repository layout \u00b6 port.toml # The configuration file. .enum # The custom enum file AZone/ # The group directory. sample1.msg # The message file sample2.msg # The message file sample3.msg # The message file BZone/ # The group directory. sample1.msg # The message file sample2.msg # The message file sample3.msg # The message file ... # Other files. Message File \u00b6 message item format like this [key] [datatype] [option...] [key] - unique key in the message group [datatype] - text | num [option] - api,backup,rule,frame message option \u00b6 name description api Real-time synchronization and messaging are handled within the corresponding external library. For more details, please refer to the api documentation. backup Changes are saved to the backup database as they occur, ensuring that values are restored upon application restart. and values are not propagated api messages during program execution. property Can specify a custom property rule Can specify rules to manage the values of corresponding messages. sample1.msg \u00b6 DevAPowerStatus enum.DeviceAStatus api:DeviceA.GetStatus DevAErrorMessage text api:DeviceA.GetErrorMessage property:{\"Arguments\":\"1,0\"} DevCTemperature num api:DeviceC.GetTemperature property:{\"MIN\":0,\"MAX\":300} DevCOnOff enum.OnOff api:DeviceC.OnOff ... Tip message document do not using special characters. Enum File \u00b6 Enums are particularly useful when you have a fixed set of values that a variable can take, such as days of the week, months of the year, or status codes. They help make your code more expressive, self-documenting, and less error-prone because you're working with named constants instead of raw integer values. enum item format like this [key] [item-name:number_key] [item-name:number_key] [key] - unique key in the enum message [item-name] - name by enum-item [property] - unique key in enum value custom.enum \u00b6 TFalse True:0 False:1 FTrue False:0 True:1 OnOff On:0 Off:1 OffOn Off:1 On:1 Commands \u00b6 Repository \u00b6 port push - push project to repository port pull - pull project from repository Tip The application runs based on the values stored in the repository. The push action must precede the application startup. Subsequently, users can perform a pull action at any desired moment to restore the repository. Application \u00b6 port run [repository-name] - run application from repository port kill - terminated current application Tip port application must be start portlib services application Message \u00b6 port set [group-key] [message-key] [set-value] - set the message value to current repository port set groupA sayHelloMessage1 Hello? [set-ok] port get [group-key] [message-key] - get the message value to current repository port get groupA sayHelloMessage1 [Hello?]","title":"Home"},{"location":"#welcome-to-port","text":"Port is a message-based library management database. It allows users to quickly redevelop and reconfigure applications by calling pre-written libraries. This feature simplifies the application development process, enabling users to create applications more easily and efficiently. Please see the documentation lincense","title":"Welcome to Port"},{"location":"#the-requirements","text":"os : windows 7+ / windows server 2003+ memory : minimum 32GB frameworks : .Net 8.0+","title":"The Requirements"},{"location":"#download-url","text":"VERSION OS STABLE URL v1.0.16 Windows x64 No v1.0.16-win-installer","title":"Download URL"},{"location":"#repository","text":"","title":"Repository"},{"location":"#creates-a-repository","text":"port new [repository-name] Tip The repository name cannot contain special characters. It follows the directory naming rules provided by the operating system.","title":"Creates a repository"},{"location":"#creates-a-group","text":"port add [group-name]","title":"Creates a group"},{"location":"#repository-layout","text":"port.toml # The configuration file. .enum # The custom enum file AZone/ # The group directory. sample1.msg # The message file sample2.msg # The message file sample3.msg # The message file BZone/ # The group directory. sample1.msg # The message file sample2.msg # The message file sample3.msg # The message file ... # Other files.","title":"Repository layout"},{"location":"#message-file","text":"message item format like this [key] [datatype] [option...] [key] - unique key in the message group [datatype] - text | num [option] - api,backup,rule,frame","title":"Message File"},{"location":"#message-option","text":"name description api Real-time synchronization and messaging are handled within the corresponding external library. For more details, please refer to the api documentation. backup Changes are saved to the backup database as they occur, ensuring that values are restored upon application restart. and values are not propagated api messages during program execution. property Can specify a custom property rule Can specify rules to manage the values of corresponding messages.","title":"message option"},{"location":"#sample1msg","text":"DevAPowerStatus enum.DeviceAStatus api:DeviceA.GetStatus DevAErrorMessage text api:DeviceA.GetErrorMessage property:{\"Arguments\":\"1,0\"} DevCTemperature num api:DeviceC.GetTemperature property:{\"MIN\":0,\"MAX\":300} DevCOnOff enum.OnOff api:DeviceC.OnOff ... Tip message document do not using special characters.","title":"sample1.msg"},{"location":"#enum-file","text":"Enums are particularly useful when you have a fixed set of values that a variable can take, such as days of the week, months of the year, or status codes. They help make your code more expressive, self-documenting, and less error-prone because you're working with named constants instead of raw integer values. enum item format like this [key] [item-name:number_key] [item-name:number_key] [key] - unique key in the enum message [item-name] - name by enum-item [property] - unique key in enum value","title":"Enum File"},{"location":"#customenum","text":"TFalse True:0 False:1 FTrue False:0 True:1 OnOff On:0 Off:1 OffOn Off:1 On:1","title":"custom.enum"},{"location":"#commands","text":"","title":"Commands"},{"location":"#repository_1","text":"port push - push project to repository port pull - pull project from repository Tip The application runs based on the values stored in the repository. The push action must precede the application startup. Subsequently, users can perform a pull action at any desired moment to restore the repository.","title":"Repository"},{"location":"#application","text":"port run [repository-name] - run application from repository port kill - terminated current application Tip port application must be start portlib services application","title":"Application"},{"location":"#message","text":"port set [group-key] [message-key] [set-value] - set the message value to current repository port set groupA sayHelloMessage1 Hello? [set-ok] port get [group-key] [message-key] - get the message value to current repository port get groupA sayHelloMessage1 [Hello?]","title":"Message"},{"location":"frame/","text":"What's FRAME? \u00b6 Frame refers to a set of messages designated within different groups and called from various relation objects. While the specification of frames in messages may vary from one project to another, maintaining consistent names in relation objects allows users to easily manage relation objects. Make frame \u00b6 Create a Message Document \u00b6 [../AZone/sample1.msg] DevAPowerStatus enum.DeviceAStatus relation:DeviceA.GetStatus frame:HTS1.PowerStatus ... [../BZone/sample1.msg] DevAPowerStatus enum.DeviceAStatus relation:DeviceA.GetStatus frame:HTS2.PowerStatus ... Create a RelationObject \u00b6 public class HeatingScenario : ScenarioRelationService { ... [Message, Shot(1)] public ShotResult EVENT_1 { set { var strValue = frame.GetValue(\"PowerStatus\"); if (strValue == \"OK\") { value.NextShot(); } } } ... } Command \u00b6 port add --scenario heating1 /HeatingLib/HeatingLib.dll port add --scenario heating2 /HeatingLib/HeatingLib.dll","title":"What's FRAME?"},{"location":"frame/#whats-frame","text":"Frame refers to a set of messages designated within different groups and called from various relation objects. While the specification of frames in messages may vary from one project to another, maintaining consistent names in relation objects allows users to easily manage relation objects.","title":"What's FRAME?"},{"location":"frame/#make-frame","text":"","title":"Make frame"},{"location":"frame/#create-a-message-document","text":"[../AZone/sample1.msg] DevAPowerStatus enum.DeviceAStatus relation:DeviceA.GetStatus frame:HTS1.PowerStatus ... [../BZone/sample1.msg] DevAPowerStatus enum.DeviceAStatus relation:DeviceA.GetStatus frame:HTS2.PowerStatus ...","title":"Create a Message Document"},{"location":"frame/#create-a-relationobject","text":"public class HeatingScenario : ScenarioRelationService { ... [Message, Shot(1)] public ShotResult EVENT_1 { set { var strValue = frame.GetValue(\"PowerStatus\"); if (strValue == \"OK\") { value.NextShot(); } } } ... }","title":"Create a RelationObject"},{"location":"frame/#command","text":"port add --scenario heating1 /HeatingLib/HeatingLib.dll port add --scenario heating2 /HeatingLib/HeatingLib.dll","title":"Command"},{"location":"learn/","text":"Quick Start \u00b6 Port operates by reflecting messages in the most recently updated repository. Try creating and editing a basic project to see how you can modify and configure projects. Follow along to understand the process better. How to create a repository \u00b6 Before starting a Port project, you need to create a root folder that defines your messages. The subfolders within this root folder are managed as groups by Port, allowing users to organize messages by group. The root folder contains files with the *.enum extension and the structure of sub-group folders. Within the sub-group folders, message definition documents with the *.msg extension are created. Here's an example \u00b6 C:\\Users\\...>cd C:\\Users\\Demo C:\\Users\\Demo>port new Demo C:\\Users\\Demo>port add --group stage,efem Here is an example of the structure of the generated repository \u00b6 root_folder/ \u251c\u2500\u2500 stage/ \u2502 \u251c\u2500\u2500 *.msg \u251c\u2500\u2500 efem/ \u2502 \u251c\u2500\u2500 *.msg \u2514\u2500\u2500 *.enum How to add messages \u00b6 To declare a message, you need to edit the *.msg file in the sub-folder you created. By defining message data types and attributes as shown below, you can later utilize various features such as automatic logging and backup. Additionally, you can define relationships using predefined relations. Here's an example of message file \u00b6 STAGE_ACCELATOR num STAGE_DECELATOR num STAGE_HOME_SENSOR enum.NonHome RELATION:IOBoardLib.DigtalInput PROPERTY:{\"Argument\":\"1,0\"} STAGE_LOAD_MOVE_TIMEOUT num STAGE_LOAD_POSITION num STAGE_POSITION enum.CHUCKPOS STAGE_POSITION_RATIO num STAGE_SPEED num How to link relation \u00b6 To link the declared relations in your messages, you need to add them to the project. This process involves entering the call key and the library name to complete the addition of the relation. How to link the library \u00b6 C:\\Users\\...>cd C:\\Users\\Demo C:\\Users\\Demo>port add --relation IOBoard1 IOBoardLib Tip If you see a message like [ERROR][open ..\\proj.toml: Access is denied.] granting administrator privileges to the port.exe program will resolve the issue. After linking the relations to your project, you can verify the integration using the following command How to check link library \u00b6 C:\\Users\\Demo>port show --relation C:\\Users\\Demo>[IOBoard1]IOBoardLib\\IOBoardLib.dll How to start project \u00b6 Once all message definitions are complete, you can start the message server based on these definitions. Before running the server, upload all updated content to the local repository by entering port push in the console. Then, run the server with the command port run [project-name] . C:\\Users\\Demo>port push C:\\Users\\Demo>port run Demo --ng ignore [localhost:5001]Port Running ... OK Access point count [4] Relation count [2] NG point [CATEGORY_MSG_POINT_RELATION][4] NG point [CATEGORY_RELATION_MESSAGE][1] NG point [CATEGORY_MEMORY][2] NG point [CATEGORY_LIBRARY][3] NG point [CATEGORY_MSG_POINT_ENUM][136] Pressing 'CTRL + C' will initiate server shutdown. Please wait for all processes to safely terminate before closing the application. Tip When running the server, if you include --ng ignore in the command, it will summarize only the points where errors (NG) occur. For detailed information on these NG points, you can visit the following URL to view the NG point table: http://localhost:5001/api/app/ng/?view=table Good luck! \u00b6 .console { width: 80%; height: 80%; background-color: black; color: #00ff00; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .yellow{ color:yellow; } .console-content { white-space: pre-wrap; } .console-content p { margin: 0; } .notepad { width: 100%; height: 80%; background-color: white; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .notepad:before { content: ''; position: absolute; top: 10px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad:after { content: ''; position: absolute; top: 30px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad-content { margin-top: 40px; } .notepad-content p { margin: 0 0 10px; line-height: 1.5; }","title":"Learn"},{"location":"learn/#quick-start","text":"Port operates by reflecting messages in the most recently updated repository. Try creating and editing a basic project to see how you can modify and configure projects. Follow along to understand the process better.","title":"Quick Start"},{"location":"learn/#how-to-create-a-repository","text":"Before starting a Port project, you need to create a root folder that defines your messages. The subfolders within this root folder are managed as groups by Port, allowing users to organize messages by group. The root folder contains files with the *.enum extension and the structure of sub-group folders. Within the sub-group folders, message definition documents with the *.msg extension are created.","title":"How to create a repository"},{"location":"learn/#heres-an-example","text":"C:\\Users\\...>cd C:\\Users\\Demo C:\\Users\\Demo>port new Demo C:\\Users\\Demo>port add --group stage,efem","title":"Here's an example"},{"location":"learn/#here-is-an-example-of-the-structure-of-the-generated-repository","text":"root_folder/ \u251c\u2500\u2500 stage/ \u2502 \u251c\u2500\u2500 *.msg \u251c\u2500\u2500 efem/ \u2502 \u251c\u2500\u2500 *.msg \u2514\u2500\u2500 *.enum","title":"Here is an example of the structure of the generated repository"},{"location":"learn/#how-to-add-messages","text":"To declare a message, you need to edit the *.msg file in the sub-folder you created. By defining message data types and attributes as shown below, you can later utilize various features such as automatic logging and backup. Additionally, you can define relationships using predefined relations.","title":"How to add messages"},{"location":"learn/#heres-an-example-of-message-file","text":"STAGE_ACCELATOR num STAGE_DECELATOR num STAGE_HOME_SENSOR enum.NonHome RELATION:IOBoardLib.DigtalInput PROPERTY:{\"Argument\":\"1,0\"} STAGE_LOAD_MOVE_TIMEOUT num STAGE_LOAD_POSITION num STAGE_POSITION enum.CHUCKPOS STAGE_POSITION_RATIO num STAGE_SPEED num","title":"Here's an example of message file"},{"location":"learn/#how-to-link-relation","text":"To link the declared relations in your messages, you need to add them to the project. This process involves entering the call key and the library name to complete the addition of the relation.","title":"How to link relation"},{"location":"learn/#how-to-link-the-library","text":"C:\\Users\\...>cd C:\\Users\\Demo C:\\Users\\Demo>port add --relation IOBoard1 IOBoardLib Tip If you see a message like [ERROR][open ..\\proj.toml: Access is denied.] granting administrator privileges to the port.exe program will resolve the issue. After linking the relations to your project, you can verify the integration using the following command","title":"How to link the library"},{"location":"learn/#how-to-check-link-library","text":"C:\\Users\\Demo>port show --relation C:\\Users\\Demo>[IOBoard1]IOBoardLib\\IOBoardLib.dll","title":"How to check link library"},{"location":"learn/#how-to-start-project","text":"Once all message definitions are complete, you can start the message server based on these definitions. Before running the server, upload all updated content to the local repository by entering port push in the console. Then, run the server with the command port run [project-name] . C:\\Users\\Demo>port push C:\\Users\\Demo>port run Demo --ng ignore [localhost:5001]Port Running ... OK Access point count [4] Relation count [2] NG point [CATEGORY_MSG_POINT_RELATION][4] NG point [CATEGORY_RELATION_MESSAGE][1] NG point [CATEGORY_MEMORY][2] NG point [CATEGORY_LIBRARY][3] NG point [CATEGORY_MSG_POINT_ENUM][136] Pressing 'CTRL + C' will initiate server shutdown. Please wait for all processes to safely terminate before closing the application. Tip When running the server, if you include --ng ignore in the command, it will summarize only the points where errors (NG) occur. For detailed information on these NG points, you can visit the following URL to view the NG point table: http://localhost:5001/api/app/ng/?view=table","title":"How to start project"},{"location":"learn/#good-luck","text":".console { width: 80%; height: 80%; background-color: black; color: #00ff00; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .yellow{ color:yellow; } .console-content { white-space: pre-wrap; } .console-content p { margin: 0; } .notepad { width: 100%; height: 80%; background-color: white; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .notepad:before { content: ''; position: absolute; top: 10px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad:after { content: ''; position: absolute; top: 30px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad-content { margin-top: 40px; } .notepad-content p { margin: 0 0 10px; line-height: 1.5; }","title":"Good luck!"},{"location":"license/","text":"Lincense \u00b6 Copyright \u00a9 Portget. All rights reserved Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#lincense","text":"Copyright \u00a9 Portget. All rights reserved Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Lincense"},{"location":"portdic/","text":"What's PortDic \u00b6 PortDic is a key-value pair data structure storage object provided by Port. Users can quickly look up values using keys, allowing for efficient data retrieval. This structure enables the storage and editing of multiple data structures, facilitating more stable and reliable development. Download \u00b6 NAME Language Package Manager OS STABLE Port.Library C# Nuget Windows x64 Yes Functions \u00b6 SET \u00b6 ... PortDic dic = portdic.Connect(\"localhost\",9000); var ok = dic.Set('AZone','SamplePower','On'); if(ok){ Console.WriteLine(\"ok\"); } ... GET \u00b6 ... PortDic dic = portdic.Connect(\"localhost\",9000); var v = dic.Get('AZone','SamplePower') // 'On' Console.WriteLine(v.Text()); var ok2 = dic.Set('AZone','SampleTemp',90); if(ok2){ Console.WriteLine(\"ok\"); } var t = dic.Get('AZone','SampleTemp') // '90' Console.WriteLine(t.Text()); if (t >= 90){ Console.WriteLine('[Warning]Over Tempature'); } ... QUEUE \u00b6 //class1.cs PortDic dic = portdic.Connect(\"localhost\",9000); dic.Create(PortDic.Structure.Queue,'TEST') var q1 = dic.Queque('TEST') q1.Enqueue(Encoding.UTF8.GetBytes('First Value')); ... //class2.cs PortDic dic = portdic.Connect(\"localhost\",9000); var q1 = dic.Queue('TEST') var v = q1.Dequeue(); //Show \"First Value\" from class1.cs Console.WriteLine(Encoding.UTF8.GetString(v)); v = q1.Dequeue(); //Show \"\" Console.WriteLine(Encoding.UTF8.GetString(v)); ... STACK \u00b6 //class1.cs PortDic dic = portdic.Connect(\"localhost\",9000); dic.Create(PortDic.Structure.Stack,'TEST') q1.Push(Encoding.UTF8.GetBytes('First Value')); ... //class2.cs PortDic dic = portdic.Connect(\"localhost\",9000); var stack = Port.Stack('TEST') var v = stack.Pop(); Console.WriteLine(Encoding.UTF8.GetString(v)); ... LIST \u00b6 //class1.cs PortDic dic = portdic.Connect(\"localhost\",9000); dic.Create(PortDic.Structure.List,'TEST') var list = Port.List('TEST') list.Add(Encoding.UTF8.GetBytes('First Value')); ... //class2.cs PortDic dic = portdic.Connect(\"localhost\",9000); var list = Port.List('TEST') var v = list.Get(0); //Show \"First Value\" from class1.cs Console.WriteLine(Encoding.UTF8.GetString(v)); //Remove index 0 q1.Remove(0); ... STORAGE \u00b6 //class1.cs PortDic dic = portdic.Connect(\"localhost\",9000); dic.Create(PortDic.Structure.Storage,'TEST') var s = Port.Storage('TEST') if (s.Set('A',Encoding.UTF8.GetBytes('First Value'))){ Console.WriteLine('Updated value') } ... //class2.cs PortDic dic = portdic.Connect(\"localhost\",9000); var s = Port.Storage('TEST') var v = s.Get('A'); //Show \"First Value\" from class1.cs Console.WriteLine(Encoding.UTF8.GetString(v)); ...","title":"Dictionary"},{"location":"portdic/#whats-portdic","text":"PortDic is a key-value pair data structure storage object provided by Port. Users can quickly look up values using keys, allowing for efficient data retrieval. This structure enables the storage and editing of multiple data structures, facilitating more stable and reliable development.","title":"What's PortDic"},{"location":"portdic/#download","text":"NAME Language Package Manager OS STABLE Port.Library C# Nuget Windows x64 Yes","title":"Download"},{"location":"portdic/#functions","text":"","title":"Functions"},{"location":"portdic/#set","text":"... PortDic dic = portdic.Connect(\"localhost\",9000); var ok = dic.Set('AZone','SamplePower','On'); if(ok){ Console.WriteLine(\"ok\"); } ...","title":"SET"},{"location":"portdic/#get","text":"... PortDic dic = portdic.Connect(\"localhost\",9000); var v = dic.Get('AZone','SamplePower') // 'On' Console.WriteLine(v.Text()); var ok2 = dic.Set('AZone','SampleTemp',90); if(ok2){ Console.WriteLine(\"ok\"); } var t = dic.Get('AZone','SampleTemp') // '90' Console.WriteLine(t.Text()); if (t >= 90){ Console.WriteLine('[Warning]Over Tempature'); } ...","title":"GET"},{"location":"portdic/#queue","text":"//class1.cs PortDic dic = portdic.Connect(\"localhost\",9000); dic.Create(PortDic.Structure.Queue,'TEST') var q1 = dic.Queque('TEST') q1.Enqueue(Encoding.UTF8.GetBytes('First Value')); ... //class2.cs PortDic dic = portdic.Connect(\"localhost\",9000); var q1 = dic.Queue('TEST') var v = q1.Dequeue(); //Show \"First Value\" from class1.cs Console.WriteLine(Encoding.UTF8.GetString(v)); v = q1.Dequeue(); //Show \"\" Console.WriteLine(Encoding.UTF8.GetString(v)); ...","title":"QUEUE"},{"location":"portdic/#stack","text":"//class1.cs PortDic dic = portdic.Connect(\"localhost\",9000); dic.Create(PortDic.Structure.Stack,'TEST') q1.Push(Encoding.UTF8.GetBytes('First Value')); ... //class2.cs PortDic dic = portdic.Connect(\"localhost\",9000); var stack = Port.Stack('TEST') var v = stack.Pop(); Console.WriteLine(Encoding.UTF8.GetString(v)); ...","title":"STACK"},{"location":"portdic/#list","text":"//class1.cs PortDic dic = portdic.Connect(\"localhost\",9000); dic.Create(PortDic.Structure.List,'TEST') var list = Port.List('TEST') list.Add(Encoding.UTF8.GetBytes('First Value')); ... //class2.cs PortDic dic = portdic.Connect(\"localhost\",9000); var list = Port.List('TEST') var v = list.Get(0); //Show \"First Value\" from class1.cs Console.WriteLine(Encoding.UTF8.GetString(v)); //Remove index 0 q1.Remove(0); ...","title":"LIST"},{"location":"portdic/#storage","text":"//class1.cs PortDic dic = portdic.Connect(\"localhost\",9000); dic.Create(PortDic.Structure.Storage,'TEST') var s = Port.Storage('TEST') if (s.Set('A',Encoding.UTF8.GetBytes('First Value'))){ Console.WriteLine('Updated value') } ... //class2.cs PortDic dic = portdic.Connect(\"localhost\",9000); var s = Port.Storage('TEST') var v = s.Get('A'); //Show \"First Value\" from class1.cs Console.WriteLine(Encoding.UTF8.GetString(v)); ...","title":"STORAGE"},{"location":"reference/","text":"API reference \u00b6 Introduction \u00b6 This page explains how the Port client calls the Port backend API. Tip Before making any API calls, please ensure that the server is running properly. If the server is not functioning correctly, API calls may fail. Therefore, verify the server's operational status before initiating any API calls. Authentication \u00b6 When authentication functionality is activated within the HOST application, service-calling applications are required to request a key from the HOST before making API calls to ensure proper authentication and access to services. This security feature remains disabled by default. GET \u00b6 Application \u00b6 URL Description /api/app/ show up application information /api/ng/ show up ng-list /api/download/ download somthing... /api/enum enum list Group \u00b6 URL Description /api/{group-name}/ accessor data /api/{group-name}/keys key list /api/{group-name}/kv key-value list /api/{group-name}/datatype key-datatype list /api/{group-name}/enumid enumid list /api/{group-name}/memory memory list /api/{group-name}/address address list API \u00b6 URL Description /api/{name}/ api information /api/{name}/keys key list /api/{name}/kv key-value list /api/{name}/set set-message list /api/{name}/get get-message list POST \u00b6 Application \u00b6 URL Description /api/enum/{enum} key list Group \u00b6 URL Description /api/{group-name}/ relation information /api/{group-name}/message/{[key]}?{[datatype] [property...]} add message PUT \u00b6 Group \u00b6 URL Description /api/{group-name}/{[key]}?{[set-value]} set value to group-message Relation \u00b6 URL Description /api/{relation-name}/{[key]}?{[set-value]} set value to relation-message DELETE \u00b6 Group \u00b6 URL Description /api/{group-name}/message/{[key]}","title":"API Reference"},{"location":"reference/#api-reference","text":"","title":"API reference"},{"location":"reference/#introduction","text":"This page explains how the Port client calls the Port backend API. Tip Before making any API calls, please ensure that the server is running properly. If the server is not functioning correctly, API calls may fail. Therefore, verify the server's operational status before initiating any API calls.","title":"Introduction"},{"location":"reference/#authentication","text":"When authentication functionality is activated within the HOST application, service-calling applications are required to request a key from the HOST before making API calls to ensure proper authentication and access to services. This security feature remains disabled by default.","title":"Authentication"},{"location":"reference/#get","text":"","title":"GET"},{"location":"reference/#application","text":"URL Description /api/app/ show up application information /api/ng/ show up ng-list /api/download/ download somthing... /api/enum enum list","title":"Application"},{"location":"reference/#group","text":"URL Description /api/{group-name}/ accessor data /api/{group-name}/keys key list /api/{group-name}/kv key-value list /api/{group-name}/datatype key-datatype list /api/{group-name}/enumid enumid list /api/{group-name}/memory memory list /api/{group-name}/address address list","title":"Group"},{"location":"reference/#api","text":"URL Description /api/{name}/ api information /api/{name}/keys key list /api/{name}/kv key-value list /api/{name}/set set-message list /api/{name}/get get-message list","title":"API"},{"location":"reference/#post","text":"","title":"POST"},{"location":"reference/#application_1","text":"URL Description /api/enum/{enum} key list","title":"Application"},{"location":"reference/#group_1","text":"URL Description /api/{group-name}/ relation information /api/{group-name}/message/{[key]}?{[datatype] [property...]} add message","title":"Group"},{"location":"reference/#put","text":"","title":"PUT"},{"location":"reference/#group_2","text":"URL Description /api/{group-name}/{[key]}?{[set-value]} set value to group-message","title":"Group"},{"location":"reference/#relation","text":"URL Description /api/{relation-name}/{[key]}?{[set-value]} set value to relation-message","title":"Relation"},{"location":"reference/#delete","text":"","title":"DELETE"},{"location":"reference/#group_3","text":"URL Description /api/{group-name}/message/{[key]}","title":"Group"},{"location":"sdk/","text":"What's PortSDK? \u00b6 Port offers a Software Development Kit (SDK) for developing system applications. With this SDK, developers can create consistent software that provides APIs, libraries, and structured documentation to end users, enabling more efficient configuration management. Get Started \u00b6 Download \u00b6 NAME Language Package Manager OS STABLE Port.SDK C# Nuget Windows x64 Yes Command \u00b6 Command Key Flags Description Run [Name] No Need Run application or api-object View [Name] --history event|count View the history for this api-object Get [Name] [Message-Name] No Need Get Message Value Set [Name] [Message-Name] No Need Set Message Value APIObject \u00b6 All objects inheriting from the APIObject can invoke messages defined in the API class via the Port Application. These messages are defined through an existing API Document, and additional attributes can be defined to provide messages with extra functionalities. Class Name \u00b6 The class name must be declared as API C# \u00b6 public class API : APIObject { public API() { this.SetLogger(new ExLogger()); } public override void Dispose() { } protected override bool IsSetterReady() { return true; } private SerialPort serial = new SerialPort(); [Message, Reserved(ReservedAttribute.Type.Address), Regex(RegexAttribute.ComRegex)] public string Address { get; set; } [Message] public int NValue { get => 3; } [Message] public double DValue { get => 2; } [Message] public string StrValue { get => \"on\"; } } Attributes \u00b6 Message Attributes \u00b6 Properties declared with Message Attributes are defined as API Messages and made available to the end-user. They apply only to properties with get and set accessors, and these getters and setters can be accessed and modified via a REST API. [Message] public int NValue { get => 3; } Reserved Attributes \u00b6 [Message, Reserved(ReservedAttribute.Type.Address), Regex(RegexAttribute.ComportRegex)] public string Address { get; set; } Regex Attributes \u00b6 Properties with Regex Attributes are subjected to a regular expression check when their values are changed. If the value does not pass the validation check, it is not updated, ensuring consistency and validity of the property's value. [Message, Regex(RegexAttribute.Ip4vRegex)] public string Address { get; set; } EnumCode Attributes \u00b6 EnumCode Attributes are declared, the values of the enum can be accessed via an API. The API allows for the retrieval of information about the enumeration values, enabling external systems or users to interact with and obtain details about the enum through the API interface. [EnumCode] public enum TestEnum : ushort { _ = 0, TestEnumItem1, TestEnumItem2, } Comment Attributes \u00b6 When Comment Attributes are declared, the comments associated with the property can be exposed through the API. This allows users or external systems to access descriptive information or documentation about the property via the API, providing context and clarity on the property's purpose or usage. [Message,Commnet(\"this is a numberic\")] public int NValue { get => 3; }","title":"SDK"},{"location":"sdk/#whats-portsdk","text":"Port offers a Software Development Kit (SDK) for developing system applications. With this SDK, developers can create consistent software that provides APIs, libraries, and structured documentation to end users, enabling more efficient configuration management.","title":"What's PortSDK?"},{"location":"sdk/#get-started","text":"","title":"Get Started"},{"location":"sdk/#download","text":"NAME Language Package Manager OS STABLE Port.SDK C# Nuget Windows x64 Yes","title":"Download"},{"location":"sdk/#command","text":"Command Key Flags Description Run [Name] No Need Run application or api-object View [Name] --history event|count View the history for this api-object Get [Name] [Message-Name] No Need Get Message Value Set [Name] [Message-Name] No Need Set Message Value","title":"Command"},{"location":"sdk/#apiobject","text":"All objects inheriting from the APIObject can invoke messages defined in the API class via the Port Application. These messages are defined through an existing API Document, and additional attributes can be defined to provide messages with extra functionalities.","title":"APIObject"},{"location":"sdk/#class-name","text":"The class name must be declared as API","title":"Class Name"},{"location":"sdk/#c","text":"public class API : APIObject { public API() { this.SetLogger(new ExLogger()); } public override void Dispose() { } protected override bool IsSetterReady() { return true; } private SerialPort serial = new SerialPort(); [Message, Reserved(ReservedAttribute.Type.Address), Regex(RegexAttribute.ComRegex)] public string Address { get; set; } [Message] public int NValue { get => 3; } [Message] public double DValue { get => 2; } [Message] public string StrValue { get => \"on\"; } }","title":"C#"},{"location":"sdk/#attributes","text":"","title":"Attributes"},{"location":"sdk/#message-attributes","text":"Properties declared with Message Attributes are defined as API Messages and made available to the end-user. They apply only to properties with get and set accessors, and these getters and setters can be accessed and modified via a REST API. [Message] public int NValue { get => 3; }","title":"Message Attributes"},{"location":"sdk/#reserved-attributes","text":"[Message, Reserved(ReservedAttribute.Type.Address), Regex(RegexAttribute.ComportRegex)] public string Address { get; set; }","title":"Reserved Attributes"},{"location":"sdk/#regex-attributes","text":"Properties with Regex Attributes are subjected to a regular expression check when their values are changed. If the value does not pass the validation check, it is not updated, ensuring consistency and validity of the property's value. [Message, Regex(RegexAttribute.Ip4vRegex)] public string Address { get; set; }","title":"Regex Attributes"},{"location":"sdk/#enumcode-attributes","text":"EnumCode Attributes are declared, the values of the enum can be accessed via an API. The API allows for the retrieval of information about the enumeration values, enabling external systems or users to interact with and obtain details about the enum through the API interface. [EnumCode] public enum TestEnum : ushort { _ = 0, TestEnumItem1, TestEnumItem2, }","title":"EnumCode Attributes"},{"location":"sdk/#comment-attributes","text":"When Comment Attributes are declared, the comments associated with the property can be exposed through the API. This allows users or external systems to access descriptive information or documentation about the property via the API, providing context and clarity on the property's purpose or usage. [Message,Commnet(\"this is a numberic\")] public int NValue { get => 3; }","title":"Comment Attributes"}]}