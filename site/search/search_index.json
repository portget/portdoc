{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Port \u00b6 More Easily Create an API-Server with Port App , designed to streamline the deployment of pkgs for developers. With this tool, developers can effortlessly deploy pkgs and integrate various applications to build a unified web service. Port Application simplifies the process, enabling developers to focus on creating seamless and efficient solutions with ease. Please see the documentation lincense 1. Application Layout \u00b6 2. The Requirements \u00b6 os : windows 11+ / windows server 2003+ memory : minimum 32GB requirements : Tip System Requirements .sdk-8.0.403-windows-x64-installer 3. Download \u00b6 VERSION OS STABLE URL v1.0.35 Windows x64 Yes v1.0.35-win-installer v1.0.34 Windows x64 Yes v1.0.34-win-installer .console { width: 80%; height: 80%; background-color: whitesmoke; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .yellow{ color:yellow; } .console-content { white-space: pre-wrap; } .console-content p { margin: 0; } .notepad { width: 100%; height: 80%; background-color: white; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .notepad:before { content: ''; position: absolute; top: 10px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad:after { content: ''; position: absolute; top: 30px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad-content { margin-top: 40px; } .notepad-content p { margin: 0 0 10px; line-height: 1.5; }","title":"Home"},{"location":"#welcome-to-port","text":"More Easily Create an API-Server with Port App , designed to streamline the deployment of pkgs for developers. With this tool, developers can effortlessly deploy pkgs and integrate various applications to build a unified web service. Port Application simplifies the process, enabling developers to focus on creating seamless and efficient solutions with ease. Please see the documentation lincense","title":"Welcome to Port"},{"location":"#1-application-layout","text":"","title":"1. Application Layout"},{"location":"#2-the-requirements","text":"os : windows 11+ / windows server 2003+ memory : minimum 32GB requirements : Tip System Requirements .sdk-8.0.403-windows-x64-installer","title":"2. The Requirements"},{"location":"#3-download","text":"VERSION OS STABLE URL v1.0.35 Windows x64 Yes v1.0.35-win-installer v1.0.34 Windows x64 Yes v1.0.34-win-installer .console { width: 80%; height: 80%; background-color: whitesmoke; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .yellow{ color:yellow; } .console-content { white-space: pre-wrap; } .console-content p { margin: 0; } .notepad { width: 100%; height: 80%; background-color: white; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .notepad:before { content: ''; position: absolute; top: 10px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad:after { content: ''; position: absolute; top: 30px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad-content { margin-top: 40px; } .notepad-content p { margin: 0 0 10px; line-height: 1.5; }","title":"3. Download"},{"location":"commands/","text":"Commands \u00b6 Cheat Sheet \u00b6 System \u00b6 command arguments description ? [script|../something.js] Run the specified script. version - Displays the version information. new [name] Can specify rules to manage the values of corresponding messages. push - Push project to repository. pull - Pull project from repository. pack [--path <project-path>] [--o <output package-name>] Pack port-package-files. run [name] Runs the pkg server based on the specified repository. ls [repo] | [pkg] | [tcp] | [comm] Displays the specified items in a list. kill [kill-code] Shutdown pkg server. env - Displays the system environment settings. help - . Server \u00b6 command arguments description set [group-name] [message-name] [value] [package-name] [message-name] [value] [script-name] [function-name] [arguments] password [user-name] [old-password] [new-password] grant [user-name] [user-level] notify [message] init [package-name] Set values in the pkg server. get [group-name] [message-name] [package-name] [message-name] [workid] [project-name].log [package-name].log [package-name].event status mls Get values from the pkg server. System \u00b6 script \u00b6 -Support for ECMAScript5 ecmascript js_es5 port push \u00b6 push project to repository port pull \u00b6 pull project from repository Tip The application runs based on the values stored in the repository. The push action must precede the application startup. Subsequently, users can perform a pull action at any desired moment to restore the repository. port set [group] [message] [value] \u00b6 set the message value to current repository port set groupA sayHelloMessage1 Hello? [set-ok] port get [group] [message] \u00b6 get the message value to current repository port get groupA sayHelloMessage1 [Hello?] Server \u00b6 port run [repository-name] \u00b6 run server from repository port shutdown \u00b6 terminated current server","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#cheat-sheet","text":"","title":"Cheat Sheet"},{"location":"commands/#system","text":"command arguments description ? [script|../something.js] Run the specified script. version - Displays the version information. new [name] Can specify rules to manage the values of corresponding messages. push - Push project to repository. pull - Pull project from repository. pack [--path <project-path>] [--o <output package-name>] Pack port-package-files. run [name] Runs the pkg server based on the specified repository. ls [repo] | [pkg] | [tcp] | [comm] Displays the specified items in a list. kill [kill-code] Shutdown pkg server. env - Displays the system environment settings. help - .","title":"System"},{"location":"commands/#server","text":"command arguments description set [group-name] [message-name] [value] [package-name] [message-name] [value] [script-name] [function-name] [arguments] password [user-name] [old-password] [new-password] grant [user-name] [user-level] notify [message] init [package-name] Set values in the pkg server. get [group-name] [message-name] [package-name] [message-name] [workid] [project-name].log [package-name].log [package-name].event status mls Get values from the pkg server.","title":"Server"},{"location":"commands/#system_1","text":"","title":"System"},{"location":"commands/#script","text":"-Support for ECMAScript5 ecmascript js_es5","title":"script"},{"location":"commands/#port-push","text":"push project to repository","title":"port push"},{"location":"commands/#port-pull","text":"pull project from repository Tip The application runs based on the values stored in the repository. The push action must precede the application startup. Subsequently, users can perform a pull action at any desired moment to restore the repository.","title":"port pull"},{"location":"commands/#port-set-group-message-value","text":"set the message value to current repository port set groupA sayHelloMessage1 Hello? [set-ok]","title":"port set [group] [message] [value]"},{"location":"commands/#port-get-group-message","text":"get the message value to current repository port get groupA sayHelloMessage1 [Hello?]","title":"port get [group] [message]"},{"location":"commands/#server_1","text":"","title":"Server"},{"location":"commands/#port-run-repository-name","text":"run server from repository","title":"port run [repository-name]"},{"location":"commands/#port-shutdown","text":"terminated current server","title":"port shutdown"},{"location":"frame/","text":"What's FRAME? \u00b6 Frame refers to a set of messages designated within different groups and called from various relation objects. While the specification of frames in messages may vary from one project to another, maintaining consistent names in relation objects allows users to easily manage relation objects. Make frame \u00b6 Create a Message Document \u00b6 [../AZone/sample1.msg] DevAPowerStatus enum.DeviceAStatus api:DeviceA.GetStatus frame:HTS1.PowerStatus ... [../BZone/sample1.msg] DevAPowerStatus enum.DeviceAStatus api:DeviceA.GetStatus frame:HTS2.PowerStatus ... Create a RelationObject \u00b6 public class HeatingScenario : ScenarioRelationService { ... [Message, Shot(1)] public ShotResult EVENT_1 { set { var strValue = frame . GetValue ( \"PowerStatus\" ); if ( strValue == \"OK\" ) { value . NextShot (); } } } ... } Command \u00b6 port add --scenario heating1 /HeatingLib/HeatingLib.dll port add --scenario heating2 /HeatingLib/HeatingLib.dll","title":"What's FRAME?"},{"location":"frame/#whats-frame","text":"Frame refers to a set of messages designated within different groups and called from various relation objects. While the specification of frames in messages may vary from one project to another, maintaining consistent names in relation objects allows users to easily manage relation objects.","title":"What's FRAME?"},{"location":"frame/#make-frame","text":"","title":"Make frame"},{"location":"frame/#create-a-message-document","text":"[../AZone/sample1.msg] DevAPowerStatus enum.DeviceAStatus api:DeviceA.GetStatus frame:HTS1.PowerStatus ... [../BZone/sample1.msg] DevAPowerStatus enum.DeviceAStatus api:DeviceA.GetStatus frame:HTS2.PowerStatus ...","title":"Create a Message Document"},{"location":"frame/#create-a-relationobject","text":"public class HeatingScenario : ScenarioRelationService { ... [Message, Shot(1)] public ShotResult EVENT_1 { set { var strValue = frame . GetValue ( \"PowerStatus\" ); if ( strValue == \"OK\" ) { value . NextShot (); } } } ... }","title":"Create a RelationObject"},{"location":"frame/#command","text":"port add --scenario heating1 /HeatingLib/HeatingLib.dll port add --scenario heating2 /HeatingLib/HeatingLib.dll","title":"Command"},{"location":"learn/","text":"Quick Start \u00b6 Port operates by reflecting messages in the most recently updated repository. Try creating and editing a basic project to see how you can modify and configure projects. Follow along to understand the process better. How to create a port-project \u00b6 Before starting a Port project, you need to create a root folder that defines your messages. The subfolders within this root folder are managed as groups by Port, allowing users to organize messages by group. The root folder contains files with the *.enum extension and the structure of sub-group folders. Within the sub-group folders, message definition documents with the *.msg extension are created. 1. Repository \u00b6 The Port project is remarkably simple and straightforward. To get started, first create a project folder in the console, then type port new sample. This will quickly generate the project files. After that, create sub-group folders and add .msg files to each sub-group folder. Feel free to create messages using text, num, and enum types as you like. Once you've specified the attributes, type port push and Port will automatically store everything. Now, just run port run sample, and the server will start, allowing you to safely and easily share messages across multiple applications. Tip The repository name cannot contain special characters. It follows the directory naming rules provided by the operating system. Create a project 2. Group \u00b6 A group serves as the root of messages. Within a single group, multiple message files can be stored, allowing for easy retrieval and editing. By managing several .msg files within the group folder, you can conveniently organize and abstract them for streamlined management. Add a group Sample Project \u00b6 How to add messages \u00b6 To declare a message, you need to edit the *.msg file in the sub-folder you created. By defining message data types and attributes as shown below, you can later utilize various features such as automatic logging and backup. Additionally, you can define relationships using predefined relations. 1. Message syntax \u00b6 [key] [datatype] [option...] A message is an object that allows users to specify pkg properties in a pre-provided Application Service. The message is a kv, and types and properties can be defined in that message. Please attach the materials attached below. [key] - unique key in the message group [datatype] - text | num | enum [attribute] - pkg,backup,rule,frame,property datatype \u00b6 name range description text 0~255 The length can be specified as a value from 0 to 255. num -1.7e+308 ~ +1.7e+308 The floating-point type that allows for the representation of decimal numbers and is capable of representing a wide range of values, both very small and very large. enum 0 ~ 65535 The user can utilize the fixed list values specified in the .enum file, which can be used at a lower cost than text values and with stricter usage. attribute \u00b6 name description pkg Real-time synchronization and messaging are handled within the corresponding external library. For more details, please refer to the pkg documentation. backup Changes are saved to the backup database as they occur, ensuring that values are restored upon application restart. and values are not propagated pkg messages during program execution. property Can specify a custom property rule Can specify rules to manage the values of corresponding messages. logging Auto logging support for messages Tip message document do not using special characters. 2. Sample \u00b6 BulbOnOff enum.OffOn pkg:Blub1.OffOn RoomTemp1 num pkg:Heater1.Temp property:{\"MIN\":0,\"MAX\":300,\"Arguments\":\"C\"} RoomTemp2 num pkg:Heater1.Temp property:{\"MIN\":0,\"MAX\":300,\"Arguments\":\"F\"} How to add enums \u00b6 1. Enum syntax \u00b6 Enums are particularly useful when you have a fixed set of values that a variable can take, such as days of the week, months of the year, or status codes. They help make your code more expressive, self-documenting, and less error-prone because you're working with named constants instead of raw integer values. enum item format like this [key] [item-name:number_key] [item-name:number_key] [key] - unique key in the enum message [item-name] - name by enum-item [property] - unique key in enum value 2. Sample \u00b6 TFalse True:0 False:1 FTrue False:0 True:1 OffOn Off:0 On:1 OnOff On:0 Off:1 How to add rules \u00b6 To declare a rule, you need to edit the *.rule file in the sub-folder you created. The rule script can control whether the user can modify settings through the setable function. The first parameter is the condition that triggers the rule, and the second parameter is the condition that determines whether the setting is modifiable. When the user changes the message value, the function is automatically called to check these conditions. 1. SetTrigger script syntax \u00b6 The set function is a conditional validation mechanism used to check and enforce logical constraints before accepting input actions. It is composed of two main parts: Input Condition \u00b6 A logical expression that specifies the input condition to be validated. Validation Condition \u00b6 A logical expression that must evaluate to true for the input action to be accepted. Syntax \u00b6 set( <Input Condition> , <Validation Condition> ); 2. GetTrigger script syntax \u00b6 The GetTrigger serves as a conditional trigger mechanism for executing specific actions when defined conditions are met. It is composed of two main parts: Trigger Condition \u00b6 A logical expression that evaluates to true or false. Action Script \u00b6 A set of instructions executed when the trigger condition evaluates to true. Syntax \u00b6 get( <Trigger Condition> , <Action Script> ); 3. Sample \u00b6 set(\"room1.BulbOnOff==Off\",\"(room1.RoomTemp1>=20)&&(room2.RoomTemp2>=20)\") set(\"room1.RoomTemp2>=30\",\"room2.RoomTemp2>=5\") get(\"(room1.RoomTemp1>=0)&&(room2.RoomTemp2>=0)\",\"room1.BulbOnOff=Off;room2.BulbOnOff=Off;\") How to import packages \u00b6 A port package, in the context of software development, is a collection of pre-written code or modules that provide specific functionality, designed to be reused across different projects. By incorporating port packages into your application, you can save time and effort by leveraging existing solutions instead of building everything from scratch. Port packages typically include libraries, utilities, or tools that handle common tasks, such as data manipulation, network communication, or file handling. The main advantage of using port packages is that they promote reusability, allowing developers to share and reuse code, which improves efficiency and reduces redundancy. Additionally, port packages help to organize your code in a modular way, making it easier to maintain and update. it becomes much easier to install, update, and track dependencies, ensuring your application is always running with the right set of tools. In summary, port packages: Increase reusability by enabling the sharing of commonly used code. Enhance efficiency by reducing the need to write code from scratch. Improve maintainability by organizing code into smaller, manageable components. Simplify management through package managers that handle installation, updates, and dependency tracking. 1. Check packages list \u00b6 2. Manual for boot.js in Port Application \u00b6 Overview The boot.js file is a critical component of the Port Application. It initializes the system by importing and validating the necessary packages. If any package fails validation, the application stops booting and logs an error. Location The boot.js file is located in the app folder of the Port Application project. Ensure all edits are made directly in this file to modify the initialization process. Structure of boot.js Below is the typical structure of the boot.js file: import Blub1 from `BulbLib1` import Blub2 from `BulbLib2` import Heater1 from `HeaterLib1` import Heater2 from `HeaterLib2` function boot(){ if (!Blub1.Valid()){ console.log(\"invalid Bubl1\"); return false; } if (!Blub2.Valid()){ console.log(\"invalid Bubl2\"); return false; } if (!Heater1.Valid()){ console.log(\"invalid Heater1\"); return false; } if (!Heater2.Valid()){ console.log(\"invalid Heater2\"); return false; } return true; } After linking the relations to your project, you can verify the integration using the following command How to start project with console \u00b6 Once all message definitions are complete, you can start the message server based on these definitions. Before running the server, upload all updated content to the local repository by entering port push in the console. Then, run the server with the command port run [project-name] . Tip When running the server, if you include --ng ignore in the command, it will summarize only the points where errors (NG) occur. For detailed information on these NG points, you can visit the following URL to view the NG point table: http://localhost:5001/api/app/ng/?view=table How to start project with application \u00b6 Good luck! \u00b6 Download sample project .console { width: 80%; height: 80%; background-color: whitesmoke; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .yellow{ color:yellow; } .console-content { white-space: pre-wrap; } .console-content p { margin: 0; } .notepad { width: 100%; height: 80%; background-color: white; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .notepad:before { content: ''; position: absolute; top: 10px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad:after { content: ''; position: absolute; top: 30px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad-content { margin-top: 40px; } .notepad-content p { margin: 0 0 10px; line-height: 1.5; } .code-box { position: relative; background: #f5f5f5; border: 1px solid #ddd; border-radius: 5px; padding: 15px; margin: 20px 0; overflow: auto; font-family: \"Courier New\", Courier, monospace; } /* Code Styling */ .code-box pre { margin: 0; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word; background: none; padding: 0; } /* Copy Button */ .copy-button { position: absolute; top: 30px; right: 30px; color: white; border: none; border-radius: 3px; padding: 5px 5px; font-size: 14px; cursor: pointer; transition: background-color 0.3s; } .copy-button:hover { background-color: #e5e5e5; } function copyCode(elementId) { const codeElement = document.getElementById(elementId); const codeText = codeElement.innerText || codeElement.textContent; navigator.clipboard.writeText(codeText).then(() => { alert(\"Code copied to clipboard!\"); }).catch((error) => { console.error(\"Failed to copy code: \", error); }); }","title":"Learn"},{"location":"learn/#quick-start","text":"Port operates by reflecting messages in the most recently updated repository. Try creating and editing a basic project to see how you can modify and configure projects. Follow along to understand the process better.","title":"Quick Start"},{"location":"learn/#how-to-create-a-port-project","text":"Before starting a Port project, you need to create a root folder that defines your messages. The subfolders within this root folder are managed as groups by Port, allowing users to organize messages by group. The root folder contains files with the *.enum extension and the structure of sub-group folders. Within the sub-group folders, message definition documents with the *.msg extension are created.","title":"How to create a port-project"},{"location":"learn/#1-repository","text":"The Port project is remarkably simple and straightforward. To get started, first create a project folder in the console, then type port new sample. This will quickly generate the project files. After that, create sub-group folders and add .msg files to each sub-group folder. Feel free to create messages using text, num, and enum types as you like. Once you've specified the attributes, type port push and Port will automatically store everything. Now, just run port run sample, and the server will start, allowing you to safely and easily share messages across multiple applications. Tip The repository name cannot contain special characters. It follows the directory naming rules provided by the operating system.","title":"1. Repository"},{"location":"learn/#2-group","text":"A group serves as the root of messages. Within a single group, multiple message files can be stored, allowing for easy retrieval and editing. By managing several .msg files within the group folder, you can conveniently organize and abstract them for streamlined management.","title":"2. Group"},{"location":"learn/#sample-project","text":"","title":"Sample Project"},{"location":"learn/#how-to-add-messages","text":"To declare a message, you need to edit the *.msg file in the sub-folder you created. By defining message data types and attributes as shown below, you can later utilize various features such as automatic logging and backup. Additionally, you can define relationships using predefined relations.","title":"How to add messages"},{"location":"learn/#1-message-syntax","text":"[key] [datatype] [option...] A message is an object that allows users to specify pkg properties in a pre-provided Application Service. The message is a kv, and types and properties can be defined in that message. Please attach the materials attached below. [key] - unique key in the message group [datatype] - text | num | enum [attribute] - pkg,backup,rule,frame,property","title":"1. Message syntax"},{"location":"learn/#datatype","text":"name range description text 0~255 The length can be specified as a value from 0 to 255. num -1.7e+308 ~ +1.7e+308 The floating-point type that allows for the representation of decimal numbers and is capable of representing a wide range of values, both very small and very large. enum 0 ~ 65535 The user can utilize the fixed list values specified in the .enum file, which can be used at a lower cost than text values and with stricter usage.","title":"datatype"},{"location":"learn/#attribute","text":"name description pkg Real-time synchronization and messaging are handled within the corresponding external library. For more details, please refer to the pkg documentation. backup Changes are saved to the backup database as they occur, ensuring that values are restored upon application restart. and values are not propagated pkg messages during program execution. property Can specify a custom property rule Can specify rules to manage the values of corresponding messages. logging Auto logging support for messages Tip message document do not using special characters.","title":"attribute"},{"location":"learn/#2-sample","text":"BulbOnOff enum.OffOn pkg:Blub1.OffOn RoomTemp1 num pkg:Heater1.Temp property:{\"MIN\":0,\"MAX\":300,\"Arguments\":\"C\"} RoomTemp2 num pkg:Heater1.Temp property:{\"MIN\":0,\"MAX\":300,\"Arguments\":\"F\"}","title":"2. Sample"},{"location":"learn/#how-to-add-enums","text":"","title":"How to add enums"},{"location":"learn/#1-enum-syntax","text":"Enums are particularly useful when you have a fixed set of values that a variable can take, such as days of the week, months of the year, or status codes. They help make your code more expressive, self-documenting, and less error-prone because you're working with named constants instead of raw integer values. enum item format like this [key] [item-name:number_key] [item-name:number_key] [key] - unique key in the enum message [item-name] - name by enum-item [property] - unique key in enum value","title":"1. Enum syntax"},{"location":"learn/#2-sample_1","text":"TFalse True:0 False:1 FTrue False:0 True:1 OffOn Off:0 On:1 OnOff On:0 Off:1","title":"2. Sample"},{"location":"learn/#how-to-add-rules","text":"To declare a rule, you need to edit the *.rule file in the sub-folder you created. The rule script can control whether the user can modify settings through the setable function. The first parameter is the condition that triggers the rule, and the second parameter is the condition that determines whether the setting is modifiable. When the user changes the message value, the function is automatically called to check these conditions.","title":"How to add rules"},{"location":"learn/#1-settrigger-script-syntax","text":"The set function is a conditional validation mechanism used to check and enforce logical constraints before accepting input actions. It is composed of two main parts:","title":"1. SetTrigger script syntax"},{"location":"learn/#input-condition","text":"A logical expression that specifies the input condition to be validated.","title":"Input Condition"},{"location":"learn/#validation-condition","text":"A logical expression that must evaluate to true for the input action to be accepted.","title":"Validation Condition"},{"location":"learn/#syntax","text":"set( <Input Condition> , <Validation Condition> );","title":"Syntax"},{"location":"learn/#2-gettrigger-script-syntax","text":"The GetTrigger serves as a conditional trigger mechanism for executing specific actions when defined conditions are met. It is composed of two main parts:","title":"2. GetTrigger script syntax"},{"location":"learn/#trigger-condition","text":"A logical expression that evaluates to true or false.","title":"Trigger Condition"},{"location":"learn/#action-script","text":"A set of instructions executed when the trigger condition evaluates to true.","title":"Action Script"},{"location":"learn/#syntax_1","text":"get( <Trigger Condition> , <Action Script> );","title":"Syntax"},{"location":"learn/#3-sample","text":"set(\"room1.BulbOnOff==Off\",\"(room1.RoomTemp1>=20)&&(room2.RoomTemp2>=20)\") set(\"room1.RoomTemp2>=30\",\"room2.RoomTemp2>=5\") get(\"(room1.RoomTemp1>=0)&&(room2.RoomTemp2>=0)\",\"room1.BulbOnOff=Off;room2.BulbOnOff=Off;\")","title":"3. Sample"},{"location":"learn/#how-to-import-packages","text":"A port package, in the context of software development, is a collection of pre-written code or modules that provide specific functionality, designed to be reused across different projects. By incorporating port packages into your application, you can save time and effort by leveraging existing solutions instead of building everything from scratch. Port packages typically include libraries, utilities, or tools that handle common tasks, such as data manipulation, network communication, or file handling. The main advantage of using port packages is that they promote reusability, allowing developers to share and reuse code, which improves efficiency and reduces redundancy. Additionally, port packages help to organize your code in a modular way, making it easier to maintain and update. it becomes much easier to install, update, and track dependencies, ensuring your application is always running with the right set of tools. In summary, port packages: Increase reusability by enabling the sharing of commonly used code. Enhance efficiency by reducing the need to write code from scratch. Improve maintainability by organizing code into smaller, manageable components. Simplify management through package managers that handle installation, updates, and dependency tracking.","title":"How to import packages"},{"location":"learn/#1-check-packages-list","text":"","title":"1. Check packages list"},{"location":"learn/#2-manual-for-bootjs-in-port-application","text":"Overview The boot.js file is a critical component of the Port Application. It initializes the system by importing and validating the necessary packages. If any package fails validation, the application stops booting and logs an error. Location The boot.js file is located in the app folder of the Port Application project. Ensure all edits are made directly in this file to modify the initialization process. Structure of boot.js Below is the typical structure of the boot.js file: import Blub1 from `BulbLib1` import Blub2 from `BulbLib2` import Heater1 from `HeaterLib1` import Heater2 from `HeaterLib2` function boot(){ if (!Blub1.Valid()){ console.log(\"invalid Bubl1\"); return false; } if (!Blub2.Valid()){ console.log(\"invalid Bubl2\"); return false; } if (!Heater1.Valid()){ console.log(\"invalid Heater1\"); return false; } if (!Heater2.Valid()){ console.log(\"invalid Heater2\"); return false; } return true; } After linking the relations to your project, you can verify the integration using the following command","title":"2. Manual for boot.js in Port Application"},{"location":"learn/#how-to-start-project-with-console","text":"Once all message definitions are complete, you can start the message server based on these definitions. Before running the server, upload all updated content to the local repository by entering port push in the console. Then, run the server with the command port run [project-name] . Tip When running the server, if you include --ng ignore in the command, it will summarize only the points where errors (NG) occur. For detailed information on these NG points, you can visit the following URL to view the NG point table: http://localhost:5001/api/app/ng/?view=table","title":"How to start project with console"},{"location":"learn/#how-to-start-project-with-application","text":"","title":"How to start project with application"},{"location":"learn/#good-luck","text":"Download sample project .console { width: 80%; height: 80%; background-color: whitesmoke; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .yellow{ color:yellow; } .console-content { white-space: pre-wrap; } .console-content p { margin: 0; } .notepad { width: 100%; height: 80%; background-color: white; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .notepad:before { content: ''; position: absolute; top: 10px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad:after { content: ''; position: absolute; top: 30px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad-content { margin-top: 40px; } .notepad-content p { margin: 0 0 10px; line-height: 1.5; } .code-box { position: relative; background: #f5f5f5; border: 1px solid #ddd; border-radius: 5px; padding: 15px; margin: 20px 0; overflow: auto; font-family: \"Courier New\", Courier, monospace; } /* Code Styling */ .code-box pre { margin: 0; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word; background: none; padding: 0; } /* Copy Button */ .copy-button { position: absolute; top: 30px; right: 30px; color: white; border: none; border-radius: 3px; padding: 5px 5px; font-size: 14px; cursor: pointer; transition: background-color 0.3s; } .copy-button:hover { background-color: #e5e5e5; } function copyCode(elementId) { const codeElement = document.getElementById(elementId); const codeText = codeElement.innerText || codeElement.textContent; navigator.clipboard.writeText(codeText).then(() => { alert(\"Code copied to clipboard!\"); }).catch((error) => { console.error(\"Failed to copy code: \", error); }); }","title":"Good luck!"},{"location":"license/","text":"Lincense \u00b6 Copyright \u00a9 PortDic. All rights reserved Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#lincense","text":"Copyright \u00a9 PortDic. All rights reserved Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Lincense"},{"location":"package/","text":"What's Package \u00b6 The Port package is a collection of reusable libraries. Users can develop packages by inheriting the PortObject , then link it to a Message, allowing for straightforward usage through Message calls. Download \u00b6 NAME Language Package Manager OS STABLE Port.SDK C# Nuget Windows x64 Yes Package Annotation \u00b6 name targets type arguments description Port class - Class Type Declaring a port attribute in a class designates that class as one managed by the port system. Once declared, the class can be registered as part of a package. Message property string/double - Messages are declared, and the values defined as properties can be controlled through package calls. Logger property ILogger - Specifies that the Logger field is to be injected with a logging system or service. Property property IProperty Message name Maps the property to a pre-declared Message Property. Vaild method property bool invalid comment Maps the property to a pre-declared Message Property. Port \u00b6 This annotation indicates that the Bulb class is managed within the Port Package. [Port(typeof(Bulb))] public class Bulb ... Property \u00b6 This annotation maps the property to a pre-declared Message Property named \"OffOn\". //Load from .msg files. yellow and red [Property(\"OffOn\")] public IProperty OffOnArgument { set; get; } Message \u00b6 Properties declared with Message Annotation are defined as API Messages and made available to the end-user. They apply only to properties with get and set accessors, and these getters and setters can be accessed and modified via a REST API. [Message] public string OffOn { set { if (OffOnArgument != null) { OffOnArgument.TryToGetValue(\"Argument\", out Value v); if (v.String() == \"yellow\") { this.SetColor(v.String()); } else if (v.String() == \"red\") { this.SetColor(v.String()); } Logger.Write(\"[SET]\" + v.String()); } this.offon = value; } get => this.offon; } Logger \u00b6 This annotation specifies that the Logger field is to be injected with a logging system or service. [Logger] public ILogger Logger { get; set; } ... Logger.Write(string.Join(\",\", v)); ... Regex \u00b6 Properties with Regex Annotation are subjected to a regular expression check when their values are changed. If the value does not pass the validation check, it is not updated, ensuring consistency and validity of the property's value. [Message, Regex(RegexAttribute.Ip4vRegex)] public string Address { get; set; } EnumCode \u00b6 EnumCode Annotation are declared, the values of the enum can be accessed via an API. The API allows for the retrieval of information about the enumeration values, enabling external systems or users to interact with and obtain details about the enum through the API interface. [EnumCode] public enum TestEnum : ushort { _ = 0, TestEnumItem1, TestEnumItem2, } Comment \u00b6 When Comment Annotation are declared, the comments associated with the property can be exposed through the API. This allows users or external systems to access descriptive information or documentation about the property via the API, providing context and clarity on the property's purpose or usage. [Message,Commnet(\"this is a numberic\")] public int NValue { get => 3; } How to create a packages \u00b6 Let's develop a package. In the Port Application, all operations are grouped at the package level and function at the message level. Every operation is defined within messages, allowing users to increase code reusability through messages. .net \u00b6 bulb package \u00b6 [Port(typeof(Bulb))] public class Bulb { public string offon = \"Off\" ; [Property(\"OffOn\")] public IProperty OffOnArgument { set ; get ; } [Logger] public ILogger Logger { get ; set ; } private System . IO . Ports . SerialPort serialPort = new System . IO . Ports . SerialPort (); private void SetColor ( string color ) { this . serialPort . Write ( \"set:color:\" + color + \"\\n\" ); } private string comport ; [Message] public string Comport { set { try { if ( this . serialPort . PortName != value ) { this . serialPort = new System . IO . Ports . SerialPort (); this . serialPort . PortName = value ; this . serialPort . BaudRate = 9600 ; this . serialPort . DataBits = 8 ; this . serialPort . StopBits = System . IO . Ports . StopBits . One ; this . serialPort . Parity = System . IO . Ports . Parity . Even ; } } catch ( System . Exception ex ) { Logger . Write ( \"[ERROR]\" + ex . Message ); } } get => comport ; } [Message] public string OffOn { set { if ( OffOnArgument != null ) { OffOnArgument . TryToGetValue ( \"Argument\" , out Value v ); if ( v . String () == \"yellow\" ) { this . SetColor ( v . String ()); } else if ( v . String () == \"red\" ) { this . SetColor ( v . String ()); } this . offon = value ; this . serialPort . Write ( value + \"\\n\" ); Logger . Write ( \"[SET]\" + v . String ()); } } get => this . offon ; } heater package \u00b6 [Port(typeof(Heater))] public class Heater { [Message] public string Power { set ; get ; } // \"Property\" applied to the TempProperty property. [Property(\"Temp\")] public IProperty TempProperty { set ; get ; } // \"Message\" applied to the Temp property. [Message] public double Temp { get { Random r = new Random ( 100 ); // Checks if the \"Arguments\" parameter of TempProperty is set to \"F\" for Fahrenheit. if ( this . TempProperty [ \"Arguments\" ] == \"F\" ) { return ( r . NextDouble () * 9 / 5 ) + 32 ; } // Checks if the \"Arguments\" parameter of TempProperty is set to \"C\" for Celsius. else if ( this . TempProperty [ \"Arguments\" ] == \"C\" ) { return r . NextDouble (); } return 1 ; } } } build packages \u00b6 port build 'path' --o BulbLib1 port build 'path' --o BulbLib2 port build 'path' --o HeaterLib1 port build 'path' --o HeaterLib2 .console { width: 80%; height: 80%; background-color: whitesmoke; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .yellow{ color:yellow; } .console-content { white-space: pre-wrap; } .console-content p { margin: 0; } .notepad { width: 100%; height: 80%; background-color: white; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .notepad:before { content: ''; position: absolute; top: 10px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad:after { content: ''; position: absolute; top: 30px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad-content { margin-top: 40px; } .notepad-content p { margin: 0 0 10px; line-height: 1.5; }","title":"Packages"},{"location":"package/#whats-package","text":"The Port package is a collection of reusable libraries. Users can develop packages by inheriting the PortObject , then link it to a Message, allowing for straightforward usage through Message calls.","title":"What's Package"},{"location":"package/#download","text":"NAME Language Package Manager OS STABLE Port.SDK C# Nuget Windows x64 Yes","title":"Download"},{"location":"package/#package-annotation","text":"name targets type arguments description Port class - Class Type Declaring a port attribute in a class designates that class as one managed by the port system. Once declared, the class can be registered as part of a package. Message property string/double - Messages are declared, and the values defined as properties can be controlled through package calls. Logger property ILogger - Specifies that the Logger field is to be injected with a logging system or service. Property property IProperty Message name Maps the property to a pre-declared Message Property. Vaild method property bool invalid comment Maps the property to a pre-declared Message Property.","title":"Package Annotation"},{"location":"package/#port","text":"This annotation indicates that the Bulb class is managed within the Port Package. [Port(typeof(Bulb))] public class Bulb ...","title":"Port"},{"location":"package/#property","text":"This annotation maps the property to a pre-declared Message Property named \"OffOn\". //Load from .msg files. yellow and red [Property(\"OffOn\")] public IProperty OffOnArgument { set; get; }","title":"Property"},{"location":"package/#message","text":"Properties declared with Message Annotation are defined as API Messages and made available to the end-user. They apply only to properties with get and set accessors, and these getters and setters can be accessed and modified via a REST API. [Message] public string OffOn { set { if (OffOnArgument != null) { OffOnArgument.TryToGetValue(\"Argument\", out Value v); if (v.String() == \"yellow\") { this.SetColor(v.String()); } else if (v.String() == \"red\") { this.SetColor(v.String()); } Logger.Write(\"[SET]\" + v.String()); } this.offon = value; } get => this.offon; }","title":"Message"},{"location":"package/#logger","text":"This annotation specifies that the Logger field is to be injected with a logging system or service. [Logger] public ILogger Logger { get; set; } ... Logger.Write(string.Join(\",\", v)); ...","title":"Logger"},{"location":"package/#regex","text":"Properties with Regex Annotation are subjected to a regular expression check when their values are changed. If the value does not pass the validation check, it is not updated, ensuring consistency and validity of the property's value. [Message, Regex(RegexAttribute.Ip4vRegex)] public string Address { get; set; }","title":"Regex"},{"location":"package/#enumcode","text":"EnumCode Annotation are declared, the values of the enum can be accessed via an API. The API allows for the retrieval of information about the enumeration values, enabling external systems or users to interact with and obtain details about the enum through the API interface. [EnumCode] public enum TestEnum : ushort { _ = 0, TestEnumItem1, TestEnumItem2, }","title":"EnumCode"},{"location":"package/#comment","text":"When Comment Annotation are declared, the comments associated with the property can be exposed through the API. This allows users or external systems to access descriptive information or documentation about the property via the API, providing context and clarity on the property's purpose or usage. [Message,Commnet(\"this is a numberic\")] public int NValue { get => 3; }","title":"Comment"},{"location":"package/#how-to-create-a-packages","text":"Let's develop a package. In the Port Application, all operations are grouped at the package level and function at the message level. Every operation is defined within messages, allowing users to increase code reusability through messages.","title":"How to create a packages"},{"location":"package/#net","text":"","title":".net"},{"location":"package/#bulb-package","text":"[Port(typeof(Bulb))] public class Bulb { public string offon = \"Off\" ; [Property(\"OffOn\")] public IProperty OffOnArgument { set ; get ; } [Logger] public ILogger Logger { get ; set ; } private System . IO . Ports . SerialPort serialPort = new System . IO . Ports . SerialPort (); private void SetColor ( string color ) { this . serialPort . Write ( \"set:color:\" + color + \"\\n\" ); } private string comport ; [Message] public string Comport { set { try { if ( this . serialPort . PortName != value ) { this . serialPort = new System . IO . Ports . SerialPort (); this . serialPort . PortName = value ; this . serialPort . BaudRate = 9600 ; this . serialPort . DataBits = 8 ; this . serialPort . StopBits = System . IO . Ports . StopBits . One ; this . serialPort . Parity = System . IO . Ports . Parity . Even ; } } catch ( System . Exception ex ) { Logger . Write ( \"[ERROR]\" + ex . Message ); } } get => comport ; } [Message] public string OffOn { set { if ( OffOnArgument != null ) { OffOnArgument . TryToGetValue ( \"Argument\" , out Value v ); if ( v . String () == \"yellow\" ) { this . SetColor ( v . String ()); } else if ( v . String () == \"red\" ) { this . SetColor ( v . String ()); } this . offon = value ; this . serialPort . Write ( value + \"\\n\" ); Logger . Write ( \"[SET]\" + v . String ()); } } get => this . offon ; }","title":"bulb package"},{"location":"package/#heater-package","text":"[Port(typeof(Heater))] public class Heater { [Message] public string Power { set ; get ; } // \"Property\" applied to the TempProperty property. [Property(\"Temp\")] public IProperty TempProperty { set ; get ; } // \"Message\" applied to the Temp property. [Message] public double Temp { get { Random r = new Random ( 100 ); // Checks if the \"Arguments\" parameter of TempProperty is set to \"F\" for Fahrenheit. if ( this . TempProperty [ \"Arguments\" ] == \"F\" ) { return ( r . NextDouble () * 9 / 5 ) + 32 ; } // Checks if the \"Arguments\" parameter of TempProperty is set to \"C\" for Celsius. else if ( this . TempProperty [ \"Arguments\" ] == \"C\" ) { return r . NextDouble (); } return 1 ; } } }","title":"heater package"},{"location":"package/#build-packages","text":"port build 'path' --o BulbLib1 port build 'path' --o BulbLib2 port build 'path' --o HeaterLib1 port build 'path' --o HeaterLib2 .console { width: 80%; height: 80%; background-color: whitesmoke; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .yellow{ color:yellow; } .console-content { white-space: pre-wrap; } .console-content p { margin: 0; } .notepad { width: 100%; height: 80%; background-color: white; color: black; padding: 20px; box-sizing: border-box; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); overflow-y: auto; } .notepad:before { content: ''; position: absolute; top: 10px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad:after { content: ''; position: absolute; top: 30px; left: 20px; right: 20px; height: 2px; background-color: #ccc; } .notepad-content { margin-top: 40px; } .notepad-content p { margin: 0 0 10px; line-height: 1.5; }","title":"build packages"},{"location":"portdic/","text":"What's PortDic \u00b6 PortDic is a key-value pair data structure storage object provided by Port. Users can quickly look up values using keys, allowing for efficient data retrieval. This structure enables the storage and editing of multiple data structures, facilitating more stable and reliable development. Download \u00b6 NAME Language Package Manager OS STABLE portdic C++ not yet Windows No portdic Delphi not yet Windows No portdic C# nuget Windows Yes portdic Python not yet Windows No portdic Javascript npm Any Yes React \u00b6 SET / GET \u00b6 import { useState , useEffect } from 'react' import reactLogo from './assets/react.svg' import viteLogo from '/vite.svg' import './App.css' import { CallPortdic } from 'portdic' ; function App () { const [ count , setCount ] = useState ( 0 ) const [ portdic , setPortdic ] = useState ( 0 ); useEffect (() => { CallPortdic ( \"localhost:5001\" ). then ( setPortdic ). catch ( console . error ); }, []); return ( <> < div > < a href = \"https://vite.dev\" target = \"_blank\" > < img src = { viteLogo } className = \"logo\" alt = \"Vite logo\" /> < /a> < a href = \"https://react.dev\" target = \"_blank\" > < img src = { reactLogo } className = \"logo react\" alt = \"React logo\" /> < /a> < /div> < div > < button onClick = {() => { var data = portdic . Execute ( \"version\" ); data . then ( resp => resp . json ()) . then ( data => { console . log ( \"success received:\" , data ); }) . catch ( error => { console . error ( \"error occurred:\" , error ); }); }} > Version < /button> < /div> < div > <!-- get value from dictionary port --> < button onClick = {() => console . log ( portdic . Get ( \"room1\" , \"RoomTemp1\" ))} > Get < /button> < /div> < div > <!-- set value to dictionary port --> < button onClick = {() => portdic . Set ( \"room1\" , \"RoomTemp1\" , \"34\" )} > Set < /button> < /div> < h1 > Vite + React < /h1> < div className = \"card\" > < button onClick = {() => setCount (( count ) => count + 1 )} > count is { count } < /button> < p > Edit < code > src / App . jsx < /code> and save to test HMR < /p> < /div> < p className = \"read-the-docs\" > Click on the Vite and React logos to learn more < /p> < /> ) } export default App .Net \u00b6 SET/GET \u00b6 ... private static IPortDic port = Port . GetDictionary ( \"sample\" ); var ok = dic . Set ( ' room1 ',' BulbOnOff ',' On ' ); if ( ok ){ Console . WriteLine ( \"ok\" ); } var v = dic . Get ( ' room1 ',' BulbOnOff ' ) // 'On' Console . WriteLine ( v . Text ()); var t1 = dic . Get ( ' room1 ',' RoomTemp1 ' ) // random number unit Celsius Console . WriteLine ( t1 . Text ()); var t2 = dic . Get ( ' room1 ',' RoomTemp2 ' ) // random number unit Fahrenheit Console . WriteLine ( t2 . Text ()); ...","title":"Dictionary"},{"location":"portdic/#whats-portdic","text":"PortDic is a key-value pair data structure storage object provided by Port. Users can quickly look up values using keys, allowing for efficient data retrieval. This structure enables the storage and editing of multiple data structures, facilitating more stable and reliable development.","title":"What's PortDic"},{"location":"portdic/#download","text":"NAME Language Package Manager OS STABLE portdic C++ not yet Windows No portdic Delphi not yet Windows No portdic C# nuget Windows Yes portdic Python not yet Windows No portdic Javascript npm Any Yes","title":"Download"},{"location":"portdic/#react","text":"","title":"React"},{"location":"portdic/#set-get","text":"import { useState , useEffect } from 'react' import reactLogo from './assets/react.svg' import viteLogo from '/vite.svg' import './App.css' import { CallPortdic } from 'portdic' ; function App () { const [ count , setCount ] = useState ( 0 ) const [ portdic , setPortdic ] = useState ( 0 ); useEffect (() => { CallPortdic ( \"localhost:5001\" ). then ( setPortdic ). catch ( console . error ); }, []); return ( <> < div > < a href = \"https://vite.dev\" target = \"_blank\" > < img src = { viteLogo } className = \"logo\" alt = \"Vite logo\" /> < /a> < a href = \"https://react.dev\" target = \"_blank\" > < img src = { reactLogo } className = \"logo react\" alt = \"React logo\" /> < /a> < /div> < div > < button onClick = {() => { var data = portdic . Execute ( \"version\" ); data . then ( resp => resp . json ()) . then ( data => { console . log ( \"success received:\" , data ); }) . catch ( error => { console . error ( \"error occurred:\" , error ); }); }} > Version < /button> < /div> < div > <!-- get value from dictionary port --> < button onClick = {() => console . log ( portdic . Get ( \"room1\" , \"RoomTemp1\" ))} > Get < /button> < /div> < div > <!-- set value to dictionary port --> < button onClick = {() => portdic . Set ( \"room1\" , \"RoomTemp1\" , \"34\" )} > Set < /button> < /div> < h1 > Vite + React < /h1> < div className = \"card\" > < button onClick = {() => setCount (( count ) => count + 1 )} > count is { count } < /button> < p > Edit < code > src / App . jsx < /code> and save to test HMR < /p> < /div> < p className = \"read-the-docs\" > Click on the Vite and React logos to learn more < /p> < /> ) } export default App","title":"SET / GET"},{"location":"portdic/#net","text":"","title":".Net"},{"location":"portdic/#setget","text":"... private static IPortDic port = Port . GetDictionary ( \"sample\" ); var ok = dic . Set ( ' room1 ',' BulbOnOff ',' On ' ); if ( ok ){ Console . WriteLine ( \"ok\" ); } var v = dic . Get ( ' room1 ',' BulbOnOff ' ) // 'On' Console . WriteLine ( v . Text ()); var t1 = dic . Get ( ' room1 ',' RoomTemp1 ' ) // random number unit Celsius Console . WriteLine ( t1 . Text ()); var t2 = dic . Get ( ' room1 ',' RoomTemp2 ' ) // random number unit Fahrenheit Console . WriteLine ( t2 . Text ()); ...","title":"SET/GET"},{"location":"reference/","text":"API reference \u00b6 Introduction \u00b6 This page explains how the Port client calls the Port backend API. Tip Before making any API calls, please ensure that the server is running properly. If the server is not functioning correctly, API calls may fail. Therefore, verify the server's operational status before initiating any API calls. Authentication \u00b6 When authentication functionality is activated within the HOST application, service-calling applications are required to request a key from the HOST before making API calls to ensure proper authentication and access to services. This security feature remains disabled by default. GET \u00b6 Application \u00b6 URL Description /api/app/ show up application information /api/ng/ show up ng-list /api/download/ download somthing... /api/enum enum list Group \u00b6 URL Description /api/{group-name}/ accessor data /api/{group-name}/keys key list /api/{group-name}/kv key-value list /api/{group-name}/datatype key-datatype list /api/{group-name}/enumid enumid list API \u00b6 URL Description /api/{name}/ api information /api/{name}/keys key list /api/{name}/kv key-value list /api/{name}/set set-message list /api/{name}/get get-message list POST \u00b6 Application \u00b6 URL Description /api/enum/{enum} key list Group \u00b6 URL Description /api/{group-name}/ relation information /api/{group-name}/message/{[key]}?{[datatype] [property...]} add message PUT \u00b6 Group \u00b6 URL Description /api/{group-name}/{[key]}?{[set-value]} set value to group-message Relation \u00b6 URL Description /api/{relation-name}/{[key]}?{[set-value]} set value to relation-message DELETE \u00b6 Group \u00b6 URL Description /api/{group-name}/message/{[key]}","title":"API reference"},{"location":"reference/#api-reference","text":"","title":"API reference"},{"location":"reference/#introduction","text":"This page explains how the Port client calls the Port backend API. Tip Before making any API calls, please ensure that the server is running properly. If the server is not functioning correctly, API calls may fail. Therefore, verify the server's operational status before initiating any API calls.","title":"Introduction"},{"location":"reference/#authentication","text":"When authentication functionality is activated within the HOST application, service-calling applications are required to request a key from the HOST before making API calls to ensure proper authentication and access to services. This security feature remains disabled by default.","title":"Authentication"},{"location":"reference/#get","text":"","title":"GET"},{"location":"reference/#application","text":"URL Description /api/app/ show up application information /api/ng/ show up ng-list /api/download/ download somthing... /api/enum enum list","title":"Application"},{"location":"reference/#group","text":"URL Description /api/{group-name}/ accessor data /api/{group-name}/keys key list /api/{group-name}/kv key-value list /api/{group-name}/datatype key-datatype list /api/{group-name}/enumid enumid list","title":"Group"},{"location":"reference/#api","text":"URL Description /api/{name}/ api information /api/{name}/keys key list /api/{name}/kv key-value list /api/{name}/set set-message list /api/{name}/get get-message list","title":"API"},{"location":"reference/#post","text":"","title":"POST"},{"location":"reference/#application_1","text":"URL Description /api/enum/{enum} key list","title":"Application"},{"location":"reference/#group_1","text":"URL Description /api/{group-name}/ relation information /api/{group-name}/message/{[key]}?{[datatype] [property...]} add message","title":"Group"},{"location":"reference/#put","text":"","title":"PUT"},{"location":"reference/#group_2","text":"URL Description /api/{group-name}/{[key]}?{[set-value]} set value to group-message","title":"Group"},{"location":"reference/#relation","text":"URL Description /api/{relation-name}/{[key]}?{[set-value]} set value to relation-message","title":"Relation"},{"location":"reference/#delete","text":"","title":"DELETE"},{"location":"reference/#group_3","text":"URL Description /api/{group-name}/message/{[key]}","title":"Group"},{"location":"sdk/","text":"What's PortSDK? \u00b6 Port offers a Software Development Kit (SDK) for developing system applications. With this SDK, developers can create consistent software that provides package, libraries, and structured documentation to end users, enabling more efficient configuration management. Get Started \u00b6 Download \u00b6 NAME Language Package Manager OS STABLE Port.SDK C# Nuget Windows x64 Yes Package \u00b6 All objects inheriting from the package can invoke messages defined in the class via the Port Application. These messages are defined through an existing API Document, and additional attributes can be defined to provide messages with extra functionalities. Class Name \u00b6 The class name must be declared as Port C# \u00b6 public class Port : PortObject { public Port () { this . SetLogger ( new ExLogger ()); } public override bool Init () { // initialized method } public override void Dispose () { } private SerialPort serial = new SerialPort (); [Message, Reserved(ReservedAttribute.Type.Address), Regex(RegexAttribute.ComRegex)] public string Address { get ; set ; } [Message] public int NValue { get => 3 ; } [Message] public double DValue { get => 2 ; } [Message] public string StrValue { get => \"on\" ; } } Attributes \u00b6 Message Attributes \u00b6 Properties declared with Message Attributes are defined as API Messages and made available to the end-user. They apply only to properties with get and set accessors, and these getters and setters can be accessed and modified via a REST API. [Message] public int NValue { get => 3; } Reserved Attributes \u00b6 [Message, Reserved(ReservedAttribute.Type.Address), Regex(RegexAttribute.ComportRegex)] public string Address { get; set; } Regex Attributes \u00b6 Properties with Regex Attributes are subjected to a regular expression check when their values are changed. If the value does not pass the validation check, it is not updated, ensuring consistency and validity of the property's value. [Message, Regex(RegexAttribute.Ip4vRegex)] public string Address { get; set; } EnumCode Attributes \u00b6 EnumCode Attributes are declared, the values of the enum can be accessed via an API. The API allows for the retrieval of information about the enumeration values, enabling external systems or users to interact with and obtain details about the enum through the API interface. [EnumCode] public enum TestEnum : ushort { _ = 0, TestEnumItem1, TestEnumItem2, } Comment Attributes \u00b6 When Comment Attributes are declared, the comments associated with the property can be exposed through the API. This allows users or external systems to access descriptive information or documentation about the property via the API, providing context and clarity on the property's purpose or usage. [Message,Commnet(\"this is a numberic\")] public int NValue { get => 3; }","title":"What's PortSDK?"},{"location":"sdk/#whats-portsdk","text":"Port offers a Software Development Kit (SDK) for developing system applications. With this SDK, developers can create consistent software that provides package, libraries, and structured documentation to end users, enabling more efficient configuration management.","title":"What's PortSDK?"},{"location":"sdk/#get-started","text":"","title":"Get Started"},{"location":"sdk/#download","text":"NAME Language Package Manager OS STABLE Port.SDK C# Nuget Windows x64 Yes","title":"Download"},{"location":"sdk/#package","text":"All objects inheriting from the package can invoke messages defined in the class via the Port Application. These messages are defined through an existing API Document, and additional attributes can be defined to provide messages with extra functionalities.","title":"Package"},{"location":"sdk/#class-name","text":"The class name must be declared as Port","title":"Class Name"},{"location":"sdk/#c","text":"public class Port : PortObject { public Port () { this . SetLogger ( new ExLogger ()); } public override bool Init () { // initialized method } public override void Dispose () { } private SerialPort serial = new SerialPort (); [Message, Reserved(ReservedAttribute.Type.Address), Regex(RegexAttribute.ComRegex)] public string Address { get ; set ; } [Message] public int NValue { get => 3 ; } [Message] public double DValue { get => 2 ; } [Message] public string StrValue { get => \"on\" ; } }","title":"C#"},{"location":"sdk/#attributes","text":"","title":"Attributes"},{"location":"sdk/#message-attributes","text":"Properties declared with Message Attributes are defined as API Messages and made available to the end-user. They apply only to properties with get and set accessors, and these getters and setters can be accessed and modified via a REST API. [Message] public int NValue { get => 3; }","title":"Message Attributes"},{"location":"sdk/#reserved-attributes","text":"[Message, Reserved(ReservedAttribute.Type.Address), Regex(RegexAttribute.ComportRegex)] public string Address { get; set; }","title":"Reserved Attributes"},{"location":"sdk/#regex-attributes","text":"Properties with Regex Attributes are subjected to a regular expression check when their values are changed. If the value does not pass the validation check, it is not updated, ensuring consistency and validity of the property's value. [Message, Regex(RegexAttribute.Ip4vRegex)] public string Address { get; set; }","title":"Regex Attributes"},{"location":"sdk/#enumcode-attributes","text":"EnumCode Attributes are declared, the values of the enum can be accessed via an API. The API allows for the retrieval of information about the enumeration values, enabling external systems or users to interact with and obtain details about the enum through the API interface. [EnumCode] public enum TestEnum : ushort { _ = 0, TestEnumItem1, TestEnumItem2, }","title":"EnumCode Attributes"},{"location":"sdk/#comment-attributes","text":"When Comment Attributes are declared, the comments associated with the property can be exposed through the API. This allows users or external systems to access descriptive information or documentation about the property via the API, providing context and clarity on the property's purpose or usage. [Message,Commnet(\"this is a numberic\")] public int NValue { get => 3; }","title":"Comment Attributes"},{"location":"supported/","text":"What is SSH (Secure Shell)? \u00b6 Secure Shell, often referred to as SSH or Secure Socket Shell, is a protocol that facilitates secure connections to remote computers or servers through a text-based interface. Once an SSH connection is successfully established, a shell session begins, allowing users to interact with and control the remote server by executing commands from their local computer. Widely used by system and network administrators, SSH is an essential tool for managing remote servers and machines. Its robust security features make it indispensable for anyone needing to remotely access and manage computers with a high degree of security. How does SSH work? \u00b6 Both the client and server actively contribute to establishing a secure SSH communication channel. The process involves several key components and steps: Client-Side Component: The client-side component is a software application or program used to connect to a remote machine. It initiates the connection by sending the remote host's information to the server. Once the provided credentials are verified, the program establishes an encrypted connection, allowing secure communication. Server-Side Component: On the server side, an SSH daemon continuously listens on a designated TCP/IP port (typically port 22, the default for SSH) for incoming connection requests. When a client attempts to connect via this port, the SSH daemon responds by sharing the supported software and protocol versions. The default protocol version for SSH communication is version 2, as version 1 has been deprecated due to security vulnerabilities. Authentication: During the connection process, the client provides authentication credentials to the server. This can include methods like username/password combinations, cryptographic key pairs, or multi-factor authentication. Once the server verifies the credentials, it establishes a new encrypted session for secure communication. Tip Default ssh port : 22 how to use putty to SSH on windows \u00b6 PuTTY is a popular free and open-source terminal emulator that supports various network protocols, such as SSH (Secure Shell), Telnet, and Rlogin. It is widely used for remotely accessing servers and systems over a network. PuTTY allows users to interact with remote machines via a command-line interface, making it a valuable tool for system administrators, developers, and IT professionals. Tip Download a putty application 1) Connect to 127.0.0.1:22 2) Enter the username and password (default : admin / admin) 3) Enter the commands What is MQTT (Message Queuing Telemetry Transport) \u00b6 MQTT is a lightweight messaging protocol primarily designed for efficient message transmission between IoT (Internet of Things) devices. This protocol is optimized to work in environments with limited network bandwidth, offering fast and reliable communication. MQTT is based on a publish/subscribe model, simplifying interactions between clients that send and receive data. How does MQTT work? \u00b6 MQTT (Message Queuing Telemetry Transport) operates on the publish/subscribe model, where devices (clients) communicate through a central server known as the broker. Here's how it works in a simplified flow: MQTT Operation Flow \u00b6 1.Clients Clients can either publish messages to a specific topic or subscribe to topics to receive messages. A client can act as both a publisher and a subscriber. 2.Broker The broker is the central server that manages message distribution. It receives messages from publishers and forwards them to subscribers who are subscribed to the relevant topic(s). 3.Topics A topic is a string that represents the channel or category of a message. Clients subscribe to topics to receive messages. Topics can be hierarchical, allowing complex topic structures (e.g., home/livingroom/temperature). Steps in MQTT Communication: 4.Connection A client connects to the MQTT broker using a specific IP address and port. It may provide credentials for authentication. Subscription \u00b6 A client subscribes to one or more topics of interest. This tells the broker which messages it wants to receive. 1.Publishing Another client can publish a message to a topic. The broker will check which clients are subscribed to that topic. Message Distribution: The broker sends the message to all clients subscribed to the topic. The message is delivered according to the Quality of Service (QoS) level defined by the publisher and subscriber. 2.QoS Levels QoS 0: Message is delivered at most once (no guarantee of delivery). QoS 1: Message is delivered at least once (guaranteed delivery but possible duplication). QoS 2: Message is delivered exactly once (guaranteed delivery without duplication). 3.Disconnect After the communication, a client can disconnect from the broker, but the broker retains subscriptions for clients that maintain a persistent session. 4.Key Concepts Publish : A client sends a message to a topic (e.g., sending sensor data). Subscribe : A client listens to a specific topic to receive messages. Broker : A server that handles the routing and delivery of messages. Topics : Categories or channels that messages are published to and subscribed from. How to use Mosquitto on windows \u00b6 path : ..\\sample\\app\\mqtt\\room1.pub url : app\\mqtt\\room1.pub room1 RoomTemp1 \\\\ [group-name] [message-name] room2 RoomTemp1 mosquitto","title":"Supported"},{"location":"supported/#what-is-ssh-secure-shell","text":"Secure Shell, often referred to as SSH or Secure Socket Shell, is a protocol that facilitates secure connections to remote computers or servers through a text-based interface. Once an SSH connection is successfully established, a shell session begins, allowing users to interact with and control the remote server by executing commands from their local computer. Widely used by system and network administrators, SSH is an essential tool for managing remote servers and machines. Its robust security features make it indispensable for anyone needing to remotely access and manage computers with a high degree of security.","title":"What is SSH (Secure Shell)?"},{"location":"supported/#how-does-ssh-work","text":"Both the client and server actively contribute to establishing a secure SSH communication channel. The process involves several key components and steps: Client-Side Component: The client-side component is a software application or program used to connect to a remote machine. It initiates the connection by sending the remote host's information to the server. Once the provided credentials are verified, the program establishes an encrypted connection, allowing secure communication. Server-Side Component: On the server side, an SSH daemon continuously listens on a designated TCP/IP port (typically port 22, the default for SSH) for incoming connection requests. When a client attempts to connect via this port, the SSH daemon responds by sharing the supported software and protocol versions. The default protocol version for SSH communication is version 2, as version 1 has been deprecated due to security vulnerabilities. Authentication: During the connection process, the client provides authentication credentials to the server. This can include methods like username/password combinations, cryptographic key pairs, or multi-factor authentication. Once the server verifies the credentials, it establishes a new encrypted session for secure communication. Tip Default ssh port : 22","title":"How does SSH work?"},{"location":"supported/#how-to-use-putty-to-ssh-on-windows","text":"PuTTY is a popular free and open-source terminal emulator that supports various network protocols, such as SSH (Secure Shell), Telnet, and Rlogin. It is widely used for remotely accessing servers and systems over a network. PuTTY allows users to interact with remote machines via a command-line interface, making it a valuable tool for system administrators, developers, and IT professionals. Tip Download a putty application 1) Connect to 127.0.0.1:22 2) Enter the username and password (default : admin / admin) 3) Enter the commands","title":"how to use putty to SSH on windows"},{"location":"supported/#what-is-mqtt-message-queuing-telemetry-transport","text":"MQTT is a lightweight messaging protocol primarily designed for efficient message transmission between IoT (Internet of Things) devices. This protocol is optimized to work in environments with limited network bandwidth, offering fast and reliable communication. MQTT is based on a publish/subscribe model, simplifying interactions between clients that send and receive data.","title":"What is MQTT (Message Queuing Telemetry Transport)"},{"location":"supported/#how-does-mqtt-work","text":"MQTT (Message Queuing Telemetry Transport) operates on the publish/subscribe model, where devices (clients) communicate through a central server known as the broker. Here's how it works in a simplified flow:","title":"How does MQTT work?"},{"location":"supported/#mqtt-operation-flow","text":"1.Clients Clients can either publish messages to a specific topic or subscribe to topics to receive messages. A client can act as both a publisher and a subscriber. 2.Broker The broker is the central server that manages message distribution. It receives messages from publishers and forwards them to subscribers who are subscribed to the relevant topic(s). 3.Topics A topic is a string that represents the channel or category of a message. Clients subscribe to topics to receive messages. Topics can be hierarchical, allowing complex topic structures (e.g., home/livingroom/temperature). Steps in MQTT Communication: 4.Connection A client connects to the MQTT broker using a specific IP address and port. It may provide credentials for authentication.","title":"MQTT Operation Flow"},{"location":"supported/#subscription","text":"A client subscribes to one or more topics of interest. This tells the broker which messages it wants to receive. 1.Publishing Another client can publish a message to a topic. The broker will check which clients are subscribed to that topic. Message Distribution: The broker sends the message to all clients subscribed to the topic. The message is delivered according to the Quality of Service (QoS) level defined by the publisher and subscriber. 2.QoS Levels QoS 0: Message is delivered at most once (no guarantee of delivery). QoS 1: Message is delivered at least once (guaranteed delivery but possible duplication). QoS 2: Message is delivered exactly once (guaranteed delivery without duplication). 3.Disconnect After the communication, a client can disconnect from the broker, but the broker retains subscriptions for clients that maintain a persistent session. 4.Key Concepts Publish : A client sends a message to a topic (e.g., sending sensor data). Subscribe : A client listens to a specific topic to receive messages. Broker : A server that handles the routing and delivery of messages. Topics : Categories or channels that messages are published to and subscribed from.","title":"Subscription"},{"location":"supported/#how-to-use-mosquitto-on-windows","text":"path : ..\\sample\\app\\mqtt\\room1.pub url : app\\mqtt\\room1.pub room1 RoomTemp1 \\\\ [group-name] [message-name] room2 RoomTemp1 mosquitto","title":"How to use Mosquitto on windows"}]}